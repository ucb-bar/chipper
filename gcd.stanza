include<"core/core.stanza">
include<"core/verse.stanza">
include<"core/stringeater.stanza">
include<"compiler/lexer.stanza">
include("ch/ch-ir.stanza")
include("ch/ch-construct.stanza")
include("ch/passes.stanza")
include("ch/widthsolver.stanza")
include-syntax(chipper)

defpackage debug :
   import core
   import verse
   import chipper.ir
   import chipper.construct
   import chipper.passes

defmodule GCD () :
  input a  : IntT(16)
  input b  : IntT(16)
  input e  : IntT(1)
  output z : IntT(16)
  output v : IntT(1)
  register x : IntT(16)
  register y : IntT(16)
  when x > y : 
    x := x - y 
  else :
    y := y - x
  when e(this) : 
    y := a(this)
    y := b(this) 
  z(this) := x
  v(this) := bit-equal?(y, CInt(0))

defn main () :
   circuit c: GCD()
   println(c)
   println("==== PASSES ====")
   val c* = run-passes(c)
   println(c*)
   println("==== FLO OUTPUT ====")
   emit-circuit(STANDARD-OUTPUT, c*)

main()
